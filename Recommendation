# Movie Recommendation Engine

This document explains the advanced recommendation algorithm implemented in our movie recommendation system.

## Overview

Our recommendation engine combines two popular recommendation techniques:

1. **Content-Based Filtering** - Recommends movies similar to what the user has previously liked based on movie features (primarily genres)
2. **Collaborative Filtering** - Recommends movies that similar users have liked

The final recommendations are a weighted combination of both approaches, providing personalized suggestions that balance similarity to user preferences with discovery of new content.

## How It Works

### Content-Based Recommendations

The content-based filtering component:

1. Analyzes the genres of movies that the user has rated highly (4+ stars)
2. Creates a user preference profile based on these genres
3. Scores unwatched movies based on how well their genres match the user's preferences
4. Normalizes scores to prevent bias toward movies with many genres

### Collaborative Filtering

The collaborative filtering component:

1. Identifies users who have rated some of the same movies as the target user
2. Calculates similarity between users using Pearson correlation coefficient
3. Predicts how the target user would rate unwatched movies based on similar users' ratings
4. Ranks movies by predicted rating

### Hybrid Approach

The two recommendation methods are combined with configurable weights:
- Content-based: 40% weight (focuses on known preferences)
- Collaborative: 60% weight (introduces diversity and discovery)

## Fallback Mechanism

For new users with no ratings, the system falls back to recommending popular movies based on average rating and number of ratings.

## API Usage

Get personalized recommendations:

```
GET /api/movies/recommendations/?count=10
```

Parameters:
- `count` (optional): Number of recommendations to return (default: 10)

Response:
```json
{
  "count": 10,
  "recommendations": [
    {
      "id": 42,
      "title": "The Shawshank Redemption",
      "genres": ["Drama"],
      "release_date": "1994-09-23",
      "average_rating": 4.8
    },
    // More recommendations...
  ]
}
```

## Performance Considerations

- User similarity calculations are computationally expensive and should be cached for larger user bases
- For production systems with millions of users, consider implementing batch processing for recommendations
